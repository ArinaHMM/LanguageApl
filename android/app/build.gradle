// Файл: android/app/build.gradle

plugins {
    id "com.android.application" // Версия управляется из settings.gradle
    id "kotlin-android"      // Версия управляется из settings.gradle
    id 'com.google.gms.google-services' // Применяем плагин Google Services
    id "dev.flutter.flutter-gradle-plugin" // Применяем Flutter Gradle Plugin
}

// Блок для принудительного указания версий зависимостей AndroidX Core
// Оставьте его активным, чтобы избежать проблем с androidx.core, требующей API 35
configurations.all {
    resolutionStrategy {
        force 'androidx.core:core:1.12.0'
        force 'androidx.core:core-ktx:1.12.0'
        // Если возникнут проблемы с другими AndroidX библиотеками, их версии также можно форсировать здесь
        // force 'androidx.appcompat:appcompat:1.6.1' // Пример
        // force 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2' // Пример
    }
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.flutter_languageapplicationmycourse_2" // Убедитесь, что это ваш namespace
    compileSdk 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId = "com.example.flutter_languageapplicationmycourse_2" // Убедитесь, что это ваш applicationId
        minSdkVersion 23 // Ваш minSdkVersion
        targetSdkVersion 34
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            // Используется стандартный debug.keystore, генерируемый Android Studio/Gradle
        }
        release {
            if (keystorePropertiesFile.exists() &&
                keystoreProperties['storeFile'] != null &&
                keystoreProperties['keyAlias'] != null &&
                keystoreProperties['storePassword'] != null &&
                keystoreProperties['keyPassword'] != null) {
                storeFile = file(keystoreProperties['storeFile'])
                storePassword = keystoreProperties['storePassword']
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
            } else {
                println("Warning: key.properties not found or incomplete. Release build will use debug signing or fail if not configured.")
                // Для безопасности лучше не использовать debug signing для релиза по умолчанию.
                // Можно сделать так, чтобы сборка релиза падала, если ключи не найдены,
                // или явно указать signingConfig signingConfigs.debug, если это допустимо для ваших нужд.
                // signingConfig signingConfigs.debug
            }
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
            // Рассмотрите возможность включения ProGuard/R8 для уменьшения размера и обфускации
            // minifyEnabled true
            // shrinkResources true
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // Kotlin Standard Library. Версия ($kotlin_version) берется из корневого android/build.gradle
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Firebase Bill of Materials (BOM) - управляет версиями Firebase библиотек.
    // Используйте последнюю стабильную версию BOM (проверьте на сайте Firebase).
    implementation(platform("com.google.firebase:firebase-bom:33.0.0")) // Например, 33.0.0 или 33.1.0

    // Firebase зависимости (их версии будут управляться BOM)
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-auth-ktx")
    implementation("com.google.firebase:firebase-firestore-ktx")
    implementation("com.google.firebase:firebase-storage-ktx")
    // Добавьте другие Firebase зависимости, если используете, например:
    // implementation("com.google.firebase:firebase-crashlytics-ktx")
    // implementation("com.google.firebase:firebase-messaging-ktx")

    // Зависимость MultiDex (com.android.support:multidex:1.0.3) очень старая.
    // При minSdkVersion 23 multiDexEnabled true обычно достаточно.
    // Если возникают проблемы с количеством методов, можно добавить более новую androidx-версию:
    // implementation 'androidx.multidex:multidex:2.0.1'
    // Но сначала попробуйте без нее.

    // Остальные ваши Flutter плагины будут добавлены сюда автоматически командой 'flutter pub get'
    // через файл build.gradle каждого плагина.
}