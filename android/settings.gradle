// Файл: android/settings.gradle

pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    // Эта строка важна для того, чтобы Gradle знал, где искать плагины, поставляемые Flutter
    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle") 

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    plugins {
        id "com.android.application" version "8.2.2" apply false
        id "org.jetbrains.kotlin.android" version "1.9.22" apply false
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS) // Оставляем это

    repositories {
        google()
        mavenCentral()

        // --- ДОБАВЛЯЕМ ЛОКАЛЬНЫЙ MAVEN РЕПОЗИТОРИЙ FLUTTER ---
        // Этот блок обычно добавляется автоматически скриптами Flutter,
        // но если его нет, или он был удален/изменен, его нужно добавить.
        // Получаем путь к Flutter SDK (уже определен выше)
        def flutterSdkPathResolved = settings.pluginManagement.getResolutionStrategy().eachPlugin {
            if (it.requested.id.name == 'dev.flutter.flutter-gradle-plugin' || it.requested.id.name == 'dev.flutter.flutter-plugin-loader') {
                // Это немного хак, чтобы получить путь, если он не доступен напрямую
                // Более простой способ - если flutterSdkPath уже есть (как у нас)
            }
        }
        // Если flutterSdkPath определен глобально в settings.gradle (как у нас), можно использовать его:
        def localFlutterSdkPath = {
            def properties = new Properties()
            file("local.properties").withInputStream { properties.load(it) }
            def sdkPath = properties.getProperty("flutter.sdk")
            assert sdkPath != null, "flutter.sdk not set in local.properties"
            return sdkPath
        }()
        
        // Добавляем репозиторий для артефактов Flutter движка
        maven {
            url "$localFlutterSdkPath/bin/cache/artifacts/engine/android-arm/"
        }
        maven {
            url "$localFlutterSdkPath/bin/cache/artifacts/engine/android-arm64/"
        }
        maven {
            url "$localFlutterSdkPath/bin/cache/artifacts/engine/android-x64/"
        }
        maven {
            url "$localFlutterSdkPath/bin/cache/artifacts/engine/android-x86/"
        }
        // Также Flutter может использовать общий maven репозиторий для некоторых своих артефактов
        maven {
            url 'https://storage.googleapis.com/flutter_infra_release/flutter/maven'
        }
        // -----------------------------------------------------
    }
}

rootProject.name = "android"
include ':app'

// ... (блок для .flutter-plugins остается как был в предыдущем ответе) ...
def flutterPluginsFile = new File(settingsDir, '../.flutter-plugins')
if (flutterPluginsFile.exists()) {
    flutterPluginsFile.eachLine { line ->
        def trimmedLine = line.trim()
        if (trimmedLine.isEmpty() || trimmedLine.startsWith('#')) { return }
        def parts = trimmedLine.split('=', 2)
        def pathPart = parts.length > 1 ? parts[1].trim() : trimmedLine
        File pluginDirectory
        if (new File(pathPart).isAbsolute()) {
            pluginDirectory = new File(pathPart)
        } else {
            pluginDirectory = new File(settingsDir, "../$pathPart")
        }
        if (!pluginDirectory.exists() || !pluginDirectory.isDirectory()) {
            println "Warning: Plugin directory does not exist or is not a directory: '$pluginDirectory' (from line '$trimmedLine')"
            return
        }
        def projectName = pluginDirectory.name
        if (projectName.isEmpty() || projectName.contains(':') || projectName.contains('\\') || projectName.contains('/')) {
            println "Warning: Invalid project name derived from .flutter-plugins: '$projectName' (from path '$pathPart'). Skipping."
            return
        }
        include ":${projectName}"
        project(":${projectName}").projectDir = pluginDirectory
    }
}