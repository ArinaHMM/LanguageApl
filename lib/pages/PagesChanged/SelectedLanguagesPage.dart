  // lib/pages/SelectLanguagePage.dart

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:toast/toast.dart';

// –ú–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ü–∏–∏ —è–∑—ã–∫–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–¥ —á–∏—â–µ
class LanguageOption {
  final String code; // 'english', 'spanish', 'german'
  final String name; // '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ò—Å–ø–∞–Ω—Å–∫–∏–π', '–ù–µ–º–µ—Ü–∫–∏–π'
  final String flagEmoji; // –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ IconData –∏–ª–∏ Image asset)
  final Color color;

  LanguageOption({
    required this.code,
    required this.name,
    required this.flagEmoji,
    required this.color,
  });
}

class SelectLanguagePage extends StatefulWidget {
  const SelectLanguagePage({Key? key}) : super(key: key);

  @override
  _SelectLanguagePageState createState() => _SelectLanguagePageState();
}

class _SelectLanguagePageState extends State<SelectLanguagePage> {
  // –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
  // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –Ω–µ –≤–∫–ª—é—á–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  final List<LanguageOption> _languagesToLearn = [
    LanguageOption(code: 'english', name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', flagEmoji: 'üá¨üáß', color: Colors.indigo[400]!),
    LanguageOption(code: 'spanish', name: '–ò—Å–ø–∞–Ω—Å–∫–∏–π', flagEmoji: 'üá™üá∏', color: Colors.orange[600]!),
    LanguageOption(code: 'german', name: '–ù–µ–º–µ—Ü–∫–∏–π', flagEmoji: 'üá©üá™', color: Colors.red[400]!),
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    // LanguageOption(code: 'french', name: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', flagEmoji: 'üá´üá∑', color: Colors.purple[400]!),
  ];

  String? _selectedLanguageCode;
  bool _isLoading = false;

  Future<void> _saveLanguageSelection() async {
    if (_selectedLanguageCode == null) {
      Toast.show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.");
      return;
    }

    final User? currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      Toast.show("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.");
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –ø–æ–ø–∞–ª —Å—é–¥–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      Navigator.pushNamedAndRemoveUntil(context, '/auth', (route) => false);
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è languageSettings
      Map<String, dynamic> learningProgressPayload = {};
      for (var langOpt in _languagesToLearn) {
        learningProgressPayload[langOpt.code] = {
          'level': langOpt.code == _selectedLanguageCode ? 'Beginner' : 'Beginner', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Beginner –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
          'xp': 0,
          'lessonsCompleted': {}, // –ü—É—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º
        };
      }

      Map<String, dynamic> languageSettings = {
        'currentLearningLanguage': _selectedLanguageCode,
        'interfaceLanguage': 'russian', // –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'learningProgress': learningProgressPayload,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º languageSettings –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await FirebaseFirestore.instance
          .collection('users')
          .doc(currentUser.uid)
          .set({'languageSettings': languageSettings}, SetOptions(merge: true));

      Toast.show("–Ø–∑—ã–∫ '${_languagesToLearn.firstWhere((lang) => lang.code == _selectedLanguageCode).name}' –≤—ã–±—Ä–∞–Ω!", duration: Toast.lengthLong);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—Ä–æ–∫–∞–º–∏ (–∏–ª–∏ –∫—É–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ)
      Navigator.pushNamedAndRemoveUntil(context, '/learn', (route) => false);

    } catch (e) {
      print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: $e");
      Toast.show("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    } finally {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤–∏–¥–∂–µ—Ç, –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º setState
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    ToastContext().init(context); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Toast –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return Scaffold(
      appBar: AppBar(
        title: const Text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"),
        backgroundColor: Colors.green[700],
        automaticallyImplyLeading: false, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        elevation: 0, // –£–±—Ä–∞—Ç—å —Ç–µ–Ω—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      ),
      body: Container(
        decoration: BoxDecoration( // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
          gradient: LinearGradient(
            colors: [Colors.green[700]!, Colors.green[400]!],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween, // –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤–Ω–∏–∑—É
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Column(
                  children: [
                    const Text(
                      "–ö–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å?",
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 10),
                    const Text(
                      "–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ–∑–∂–µ.",
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.white70,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 30),
                  ],
                ),
                Expanded(
                  child: ListView.separated(
                    itemCount: _languagesToLearn.length,
                    separatorBuilder: (context, index) => const SizedBox(height: 12),
                    itemBuilder: (context, index) {
                      final lang = _languagesToLearn[index];
                      final isSelected = _selectedLanguageCode == lang.code;
                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            _selectedLanguageCode = lang.code;
                          });
                        },
                        child: AnimatedContainer(
                          duration: const Duration(milliseconds: 200),
                          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
                          decoration: BoxDecoration(
                            color: isSelected ? lang.color.withOpacity(0.9) : Colors.white.withOpacity(0.9),
                            borderRadius: BorderRadius.circular(12),
                            border: isSelected
                                ? Border.all(color: Colors.white, width: 2.5)
                                : Border.all(color: Colors.transparent, width: 0),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.1),
                                blurRadius: 8,
                                offset: const Offset(0, 4),
                              )
                            ],
                          ),
                          child: Row(
                            children: [
                              Text(lang.flagEmoji, style: const TextStyle(fontSize: 32)),
                              const SizedBox(width: 16),
                              Expanded(
                                child: Text(
                                  lang.name,
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: isSelected ? FontWeight.bold : FontWeight.w600,
                                    color: isSelected ? Colors.white : Colors.black87,
                                  ),
                                ),
                              ),
                              if (isSelected)
                                const Icon(Icons.check_circle, color: Colors.white, size: 28),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
                ),
                const SizedBox(height: 20),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _selectedLanguageCode == null ? Colors.grey[400] : Colors.amber[600],
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12)
                    ),
                    elevation: _selectedLanguageCode == null ? 0 : 5,
                  ),
                  onPressed: _selectedLanguageCode == null || _isLoading ? null : _saveLanguageSelection,
                  child: _isLoading
                      ? const SizedBox(
                          width: 24,
                          height: 24,
                          child: CircularProgressIndicator(color: Colors.white, strokeWidth: 3),
                        )
                      : const Text("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!", style: TextStyle(color: Colors.white)),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}